name: Web-counter Release CI

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the source code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.8"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Log into DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set Docker image tags
        id: vars
        run: echo "RELEASE_TAG=${{ github.sha }}" >> $GITHUB_ENV

      - name: Build and push backend Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./backend.dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/ci-cd-webcounter-backend:${{ env.RELEASE_TAG }}

      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./frontend.dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/ci-cd-webcounter-frontend:${{ env.RELEASE_TAG }}


# --------- Deploy the Docker images on an EC2 instance --------- #
# https://spacelift.io/blog/terraform-remote-state

  deploy:
      needs: build-and-push
      runs-on: ubuntu-latest
      steps:
        - name: Check out the repo
          uses: actions/checkout@v3

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: af-south-1
      
        - name: Initialise Terraform
          uses: hashicorp/setup-terraform@v2 
          with:
            terraform_version: 1.4.0

        - name: Terraform Init
          run: terraform init
      
        - name: Terraform Plan
          run: terraform plan -input=false -no-color # -var="ec2_private_key=${{ secrets.EC2_PRIVATE_KEY }}"

        - name: Terraform Apply
          id: apply
          #env:
            #TF_VAR_ec2_private_key: ${{ secrets.EC2_PRIVATE_KEY }}
          run: terraform apply -auto-approve

        - name: Check Terraform DNS Output
          run: |
            EC2_IP=$(terraform output -raw ec2_public_dns | grep -o 'ec2-.*\.compute\.amazonaws\.com' | head -n 1)

            # Trim any trailing whitespace or newline characters
            EC2_IP=$(echo "${EC2_IP}" | sed 's/[[:space:]\$]*$//')
  
            # Debugging: Print the extracted DNS address
            echo "Extracted EC2 DNS: ${EC2_IP}"
  
            # Add the DNS address to GitHub Actions environment
            echo "EC2_IP=${EC2_IP}" >> $GITHUB_ENV
  
        #- name: Check Github env.
          #run: |
            #echo "EC2_IP: ${{ env.EC2_IP }}"
            #echo "${{ secrets.EC2_PRIVATE_KEY }}" >> myDefaultKeypair.pem

        - name: Connect to EC2 instance using SSH and Deploy
          run: |
              ssh -p 22 -i ${{ secrets.EC2_PRIVATE_KEY }} -o StrictHostKeyChecking=no ubuntu@${{ env.EC2_IP }}
              sudo apt-get update -y
              sudo apt-get install -y docker.io docker-compose
              # Replace placeholders in docker-compose.yaml
              sed -i "s|\${{ secrets.DOCKER_USERNAME }}|${{ secrets.DOCKER_USERNAME }}|g" ~/docker-compose.yaml
              sed -i "s|\${{ env.RELEASE_TAG }}|${{ env.RELEASE_TAG }}|g" ~/docker-compose.yaml
              sudo docker-compose -f ~/docker-compose.yaml up -d
